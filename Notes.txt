In summary, MongoDB Compass is a tool to visualize and interact with data stored in a MongoDB database,
and MongoDB Atlas is a cloud-based service that hosts and manages MongoDB databases,
including the actual storage of data.

1->(done) how does select work with populate and what does it return and how to select some fields 
  const retweets = await Retweet.find({user: req.params.userId}).select("tweet, -_id").populate({
    path: "tweet",
    select: ""
  }) 
  
here we find all object and select tweet from it and to select fields from populated we use .populate({path: "tweet",select: ""}) 


[[// upload photo ]]
to upload photo with tweet or comment we use multer middleWare before createTweet, 
check in createTweet if there is file create tweet with photo path else create simple tweet 

[[compare]]
In terms of performance, the aggregation pipeline approach might be more efficient for larger datasets because 
it minimizes the data transferred between the database and the application. 
Additionally, if you have indexes on the relevant fields (name, _id, follower, followed), the performance can be further optimized.


[[To search in someOne followers -> use aggregate: (there is voice in whatsapp) ]]
1) find all users with this name , 
2) lookup all follows which follower has this name, 
3) git all follows which follower has the name and followed the user id  


[[good describetion of the difference between sane and update]]
Both code snippets are essentially doing the same thing: they are handling a "like" action for a tweet in a hypothetical social media application.
The first code snippet uses the findByIdAndUpdate method to update the tweet's likes field,
while the second code snippet uses the save method to update the tweet's likes field.
In terms of performance,
the findByIdAndUpdate method is generally faster than the save method because it performs the update in a single database operation,
whereas the save method performs a read and a write operation.
However, the difference in performance is likely to be negligible in most cases,
and the choice between the two methods will depend on other factors such as the specific requirements of your application and your personal preference.
In general, it's a good idea to use the findByIdAndUpdate method when you need to update a document and return the updated document in a single operation,
and to use the save method when you need to update a document and return the updated document in a separate operation.

[[Note]]
We can use updateOne on the document itSelf not model --> user.updateOne({x:y})

[[replaceRoot]]
The $replaceRoot stage in the MongoDB aggregation pipeline is used to replace the existing root document with a new one.
This stage is particularly useful when you want to reshape the output of your aggregation pipeline.
Now, after these stages, you have a document structure with a field named "tweet" containing the content of the matching tweets.
The $replaceRoot stage is introduced to replace the root document with the content of the "tweet" field, 
effectively promoting "tweet" to the top-level structure.


--------------------------
difference between store the token in cookie and in database? 
  we should store it in cookie to access it in requests but why we store it in database ?
    we store it in database to compare the refreshToken which send in cookie with the stored in database for more security.


still -> 1) modify the auth error in sending wrong password (Done)  
2) refactor all auth.protect put it once 
3) review the related operations in all and in follow spacificlly 